// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchedulingAPI.Models;

#nullable disable

namespace SchedulingAPI.Migrations
{
    [DbContext(typeof(ScheduleContext))]
    [Migration("20250613073554_updated")]
    partial class updated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ScheduledEventUser", b =>
                {
                    b.Property<string>("ParticipantsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("ScheduledEventsId")
                        .HasColumnType("bigint");

                    b.HasKey("ParticipantsId", "ScheduledEventsId");

                    b.HasIndex("ScheduledEventsId");

                    b.ToTable("ScheduledEventUser");
                });

            modelBuilder.Entity("SchedulingAPI.Models.Bookable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OfferingShopId")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("StaffContractId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OfferingShopId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StaffContractId");

                    b.ToTable("Bookables");

                    b.HasDiscriminator().HasValue("Bookable");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SchedulingAPI.Models.DateTimeRange", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<long?>("OperatingHoursId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("OperatingHoursId");

                    b.ToTable("DateTimeRange");
                });

            modelBuilder.Entity("SchedulingAPI.Models.Equipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("SchedulingAPI.Models.OperatingHours", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BookableId")
                        .HasColumnType("bigint");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<long?>("StaffContractId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookableId");

                    b.HasIndex("StaffContractId");

                    b.ToTable("OperatingHours");
                });

            modelBuilder.Entity("SchedulingAPI.Models.ScheduledEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BookableId")
                        .HasColumnType("bigint");

                    b.Property<long>("DateTimeRangeid")
                        .HasColumnType("bigint");

                    b.Property<long?>("EquipmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookableId");

                    b.HasIndex("DateTimeRangeid");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ScheduledEvents");
                });

            modelBuilder.Entity("SchedulingAPI.Models.Shop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("SchedulingAPI.Models.StaffContract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffContracts");
                });

            modelBuilder.Entity("SchedulingAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<long?>("BookableId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BookableId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ShopUser", b =>
                {
                    b.Property<string>("OwnersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("ShopsId")
                        .HasColumnType("bigint");

                    b.HasKey("OwnersId", "ShopsId");

                    b.HasIndex("ShopsId");

                    b.ToTable("ShopUser");
                });

            modelBuilder.Entity("SchedulinAPI.Models.NeedsEquipmentBookable", b =>
                {
                    b.HasBaseType("SchedulingAPI.Models.Bookable");

                    b.HasDiscriminator().HasValue("NeedsEquipmentBookable");
                });

            modelBuilder.Entity("SchedulingAPI.Models.InvitationBookable", b =>
                {
                    b.HasBaseType("SchedulingAPI.Models.Bookable");

                    b.HasDiscriminator().HasValue("InvitationBookable");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SchedulingAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SchedulingAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulingAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SchedulingAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScheduledEventUser", b =>
                {
                    b.HasOne("SchedulingAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulingAPI.Models.ScheduledEvent", null)
                        .WithMany()
                        .HasForeignKey("ScheduledEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulingAPI.Models.Bookable", b =>
                {
                    b.HasOne("SchedulingAPI.Models.Shop", "OfferingShop")
                        .WithMany("Bookables")
                        .HasForeignKey("OfferingShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulingAPI.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("SchedulingAPI.Models.StaffContract", null)
                        .WithMany("Bookables")
                        .HasForeignKey("StaffContractId");

                    b.Navigation("OfferingShop");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SchedulingAPI.Models.DateTimeRange", b =>
                {
                    b.HasOne("SchedulingAPI.Models.OperatingHours", null)
                        .WithMany("Range")
                        .HasForeignKey("OperatingHoursId");
                });

            modelBuilder.Entity("SchedulingAPI.Models.Equipment", b =>
                {
                    b.HasOne("SchedulingAPI.Models.Shop", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SchedulingAPI.Models.OperatingHours", b =>
                {
                    b.HasOne("SchedulingAPI.Models.Bookable", null)
                        .WithMany("OperatingHours")
                        .HasForeignKey("BookableId");

                    b.HasOne("SchedulingAPI.Models.StaffContract", null)
                        .WithMany("OperatingHours")
                        .HasForeignKey("StaffContractId");
                });

            modelBuilder.Entity("SchedulingAPI.Models.ScheduledEvent", b =>
                {
                    b.HasOne("SchedulingAPI.Models.Bookable", "Bookable")
                        .WithMany()
                        .HasForeignKey("BookableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulingAPI.Models.DateTimeRange", "DateTimeRange")
                        .WithMany()
                        .HasForeignKey("DateTimeRangeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulingAPI.Models.Equipment", null)
                        .WithMany("ScheduledEvents")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("SchedulingAPI.Models.User", "Owner")
                        .WithMany("OwnedEvents")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bookable");

                    b.Navigation("DateTimeRange");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SchedulingAPI.Models.StaffContract", b =>
                {
                    b.HasOne("SchedulingAPI.Models.Shop", "Shop")
                        .WithMany("Contracts")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulingAPI.Models.User", "ID")
                        .WithMany("StaffContracts")
                        .HasForeignKey("StaffId");

                    b.Navigation("Shop");

                    b.Navigation("ID");
                });

            modelBuilder.Entity("SchedulingAPI.Models.User", b =>
                {
                    b.HasOne("SchedulingAPI.Models.Bookable", null)
                        .WithMany("JoiningUsers")
                        .HasForeignKey("BookableId");
                });

            modelBuilder.Entity("ShopUser", b =>
                {
                    b.HasOne("SchedulingAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulingAPI.Models.Shop", null)
                        .WithMany()
                        .HasForeignKey("ShopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulingAPI.Models.Bookable", b =>
                {
                    b.Navigation("JoiningUsers");

                    b.Navigation("OperatingHours");
                });

            modelBuilder.Entity("SchedulingAPI.Models.Equipment", b =>
                {
                    b.Navigation("ScheduledEvents");
                });

            modelBuilder.Entity("SchedulingAPI.Models.OperatingHours", b =>
                {
                    b.Navigation("Range");
                });

            modelBuilder.Entity("SchedulingAPI.Models.Shop", b =>
                {
                    b.Navigation("Bookables");

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("SchedulingAPI.Models.StaffContract", b =>
                {
                    b.Navigation("Bookables");

                    b.Navigation("OperatingHours");
                });

            modelBuilder.Entity("SchedulingAPI.Models.User", b =>
                {
                    b.Navigation("OwnedEvents");

                    b.Navigation("StaffContracts");
                });
#pragma warning restore 612, 618
        }
    }
}
